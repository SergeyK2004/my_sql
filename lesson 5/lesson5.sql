/* Практическое задание #5. */

-- Практическое задание по теме «Операторы, фильтрация, сортировка и ограничение»

/* Задание # 1.
 * Пусть в таблице users поля created_at и updated_at оказались незаполненными. Заполните их текущими датой и временем.

*/
-- заполняем поля таблицы значениями без отбора, таким образом заполним все строки таблицы

UPDATE users 
SET created_at = NOW(),
    updated_at = NOW();



/* Задание # 2.
 * Таблица users была неудачно спроектирована. Записи created_at и updated_at были заданы типом VARCHAR и в них долгое время
 *  помещались значения в формате 20.10.2017 8:10. Необходимо преобразовать поля к типу DATETIME, сохранив введённые ранее значения.
*/

-- преобразуем все значения колонки в формат даты и времени
UPDATE users 
SET created_at = STR_TO_DATE(created_at,"%e.%c.%Y %k:%i"),
    updated_at = STR_TO_DATE(created_at,"%e.%c.%Y %k:%i");


-- меняем тип колонки
ALTER TABLE users 
    MODIFY COLUMN created_at DATETIME,
    MODIFY COLUMN updated_at DATETIME;


/* Задание # 3.
* В таблице складских запасов storehouses_products в поле value могут встречаться самые разные цифры: 0, если товар закончился
*  и выше нуля, если на складе имеются запасы. Необходимо отсортировать записи таким образом, чтобы они выводились в порядке
*  увеличения значения value. Однако нулевые запасы должны выводиться в конце, после всех записей.
*/

-- сделал двойную сортировку, сперва по равенству нулю, если не равно получаем нули и все позиции с не пустым остатков выходят вперед
SELECT * FROM storehouses_products ORDER BY (value=0), value ;


/* Задание # 4.
 * 
 * (по желанию) Из таблицы users необходимо извлечь пользователей, родившихся в августе и мае. Месяцы заданы в
 *  виде списка английских названий (may, august)
 */

SELECT * FROM users WHERE MONTHNAME(birthday_at) IN ('may', 'august');

/* Задание # 5.
 * 
 * (по желанию) Из таблицы catalogs извлекаются записи при помощи запроса. SELECT * FROM catalogs WHERE id IN (5, 1, 2);
 *  Отсортируйте записи в порядке, заданном в списке IN.
 */

SELECT * FROM catalogs WHERE id IN (5, 1, 2) ORDER BY FIELD(id, 5, 1, 2);


-- Практическое задание теме «Агрегация данных»

/* Задание # 1.
 * Подсчитайте средний возраст пользователей в таблице users.
*/

-- сперва использовал функцию AVG но ее потом нужно округлять, иначе не красиво, решил вторым способом написать с целочисленным делением
SELECT sum(TIMESTAMPDIFF(YEAR, birthday_at, NOW())) DIV COUNT(id) AS 'average age' FROM users;

/* Задание # 2.
 * Подсчитайте количество дней рождения, которые приходятся на каждый из дней недели. Следует учесть,
 * что необходимы дни недели текущего года, а не года рождения.
 * Тоже не совсем понятно, нужно все 7 дней недли и количство др, а где нет там 0 или количество только тех, что есть?
 * Чтобы с нулями я бы присоеденил еще один запрос с названиями дней недели и количеством 0 и общую группировку 
 * А если сортировка по русски, то еще одну колонку с цифровым номером дня недели, тем что с понедельника с 0 считает и по нему сортировка
*/

SELECT 
    COUNT(birthday_at),
    DAYNAME(ADDDATE(birthday_at, INTERVAL  YEAR(CURDATE()) - YEAR(birthday_at) YEAR )) AS nameday
    FROM users
    GROUP BY nameday;


/* Задание # 3.
 * (по желанию) Подсчитайте произведение чисел в столбце таблицы.
*/


/* не скажу что данной теории достаточно, чтобы решить эту задачу полностью. решение работает только если в таблице нет в колонке 
* значений 0, отрицательных значений или NULL 
* Для полного решения нужно делать связку из запросов с вложением запросов.
* И так практически все задачи не решаются чисто по показанной в видео теории, к каждой нужно просто самому искать инфу,
* а здесь так это вообще очень следующий шаг 
*
*/

SELECT exp(sum(ln(value))) FROM storehouses_products ;

